Compiled from "ArrayList.java"
public class java.util.ArrayList<E> extends java.util.AbstractList<E> implements java.util.List<E>, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable {
  private static final long serialVersionUID;
  private static final int DEFAULT_CAPACITY;
  private static final java.lang.Object[] EMPTY_ELEMENTDATA;
  private static final java.lang.Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
  transient java.lang.Object[] elementData;
  private int size;
  public java.util.ArrayList(int);
  public java.util.ArrayList();
  public java.util.ArrayList(java.util.Collection<? extends E>);
  public void trimToSize();
  public void ensureCapacity(int);
  private java.lang.Object[] grow(int);
  private java.lang.Object[] grow();
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public int indexOf(java.lang.Object);
  int indexOfRange(java.lang.Object, int, int);
  public int lastIndexOf(java.lang.Object);
  int lastIndexOfRange(java.lang.Object, int, int);
  public java.lang.Object clone();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  E elementData(int);
  static <E> E elementAt(java.lang.Object[], int);
  public E get(int);
  public E set(int, E);
  private void add(E, java.lang.Object[], int);
  public boolean add(E);
  public void add(int, E);
  public E remove(int);
  public boolean equals(java.lang.Object);
  boolean equalsRange(java.util.List<?>, int, int);
  private boolean equalsArrayList(java.util.ArrayList<?>);
  private void checkForComodification(int);
  public int hashCode();
  int hashCodeRange(int, int);
  public boolean remove(java.lang.Object);
  private void fastRemove(java.lang.Object[], int);
  public void clear();
  public boolean addAll(java.util.Collection<? extends E>);
  public boolean addAll(int, java.util.Collection<? extends E>);
  protected void removeRange(int, int);
  private void shiftTailOverGap(java.lang.Object[], int, int);
  private void rangeCheckForAdd(int);
  private java.lang.String outOfBoundsMsg(int);
  private static java.lang.String outOfBoundsMsg(int, int);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  boolean batchRemove(java.util.Collection<?>, boolean, int, int);
  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
  public java.util.ListIterator<E> listIterator(int);
  public java.util.ListIterator<E> listIterator();
  public java.util.Iterator<E> iterator();
  public java.util.List<E> subList(int, int);
  public void forEach(java.util.function.Consumer<? super E>);
  public java.util.Spliterator<E> spliterator();
  private static long[] nBits(int);
  private static void setBit(long[], int);
  private static boolean isClear(long[], int);
  public boolean removeIf(java.util.function.Predicate<? super E>);
  boolean removeIf(java.util.function.Predicate<? super E>, int, int);
  public void replaceAll(java.util.function.UnaryOperator<E>);
  private void replaceAllRange(java.util.function.UnaryOperator<E>, int, int);
  public void sort(java.util.Comparator<? super E>);
  void checkInvariants();
  static {};
}
